from telegram import ReplyKeyboardMarkup


import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


drugs = [
    {
        'name': '–ê–∫–≤–∞–ª–æ—Ä –±–µ–±–∏',
        'brand': '–ê–ö–í–ê–õ–û–†',
        'variants': [
            {'option': '150 –º–ª –º—è–≥–∫–∏–π –¥—É—à', 'price': 449.00},
            {'option': '15 –º–ª –∫–∞–ø–ª–∏', 'price': 237.00}
        ]
    },
    {
        'name': '–ö–æ–º–±–∏–ª–∏–ø–µ–Ω',
        'brand': '–§–∞—Ä–º—Å—Ç–∞–Ω–¥–∞—Ä—Ç-–£—Ñ–∏–º—Å–∫–∏–π –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π –∑–∞–≤–æ–¥,–û–ê–û',
        'variants': [
            {'option': '—Ä–∞—Å—Ç–≤–æ—Ä –¥–ª—è –≤–Ω—É—Ç—Ä–∏–º—ã—à–µ—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è 2 –º–ª –∞–º–ø—É–ª—ã 5 —à—Ç.', 'price': 234.00},
            {'option': '—Ä–∞—Å—Ç–≤–æ—Ä –¥–ª—è –≤–Ω—É—Ç—Ä–∏–º—ã—à–µ—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è 2 –º–ª –∞–º–ø—É–ª—ã 10 —à—Ç.', 'price': 330.00}
        ]
    }
]


def great_user(update, context):
    # start_keyboard = ReplyKeyboardMarkup([['–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞']], resize_keyboard=True)

    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç –±–æ—Ç –°–ø—Ä–∞–≤–ê–ø—Ç–µ–∫–∞. –†–∞–±–æ—Ç–∞—é 2Ô∏è‚É£4Ô∏è‚É£ / 7Ô∏è‚É£, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤. –ü–æ–º–æ–≥—É –í–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –∞–ø—Ç–µ–∫–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏.üöë')
    update.message.reply_text('–î–ª—è –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ - –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞  ')
    
    logger.info('–í—ã–∑–≤–∞–Ω /start') 


def text_handler(update, context):
    user_input = get_user_input(update, context)
    matches = search_medicine(user_input)
    send_medicine_info(update, matches)


def get_user_input(update, context):
    user_input = update.message.text.lower().strip()
    return user_input


def search_medicine(user_input):
    matches = []
    
    for medicine in drugs:
        if user_input in medicine['name'].lower():
            matches.append(medicine)
            
    return matches


def send_medicine_info(update, matches):
    if not matches:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return
    
    message = ""
    
    for match in matches:
        message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {match['name']}\n"
        message += f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {match['brand']}\n"
        message += "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        
        if len(match['variants']) == 1:
            message += f"{match['variants'][0]['option']} - {match['variants'][0]['price']} —Ä—É–±.\n"
        else:
            for i, variant in enumerate(match['variants'], start=1):
                message += f"{i}. {variant['option']} - {variant['price']} —Ä—É–±.\n"
        
        message += "\n"
    
    update.message.reply_text(message)


# 2) —Å–¥–µ–ª–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é –Ω–∞–π–¥–µ–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ , –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ
# 3) –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
# 4) —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –ø–∞—Ä—Å–µ—Ä–∞ –∫ –≥–µ–æ
# 5) –í—ã–≤–æ–¥–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∞–ø—Ç–µ–∫–∏, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
# 6)–°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ—á–∫–æ–π